# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Defines fuzzer_test.
#

# fuzzer_test is used to define individual libfuzzer tests.
#
# Supported attributes:
# - (required) sources - fuzzer test source files
# - deps - test dependencies
# - additional_configs - additional configs to be used for compilation
# - dict - a dictionary file for the fuzzer.
# - libfuzzer_options - options for the fuzzer (e.g. -max_len or -timeout).
# - seed_corpus - a directory with seed corpus.
#
# If use_libfuzzer gn flag is defined, then proper fuzzer would be build.
# Without use_libfuzzer or use_afl a unit-test style binary would be built on
# linux and the whole target is a no-op otherwise.
#
# The template wraps test() target with appropriate dependencies.
# If any test run-time options are present (dict or libfuzzer_options), then a
# config (.options file) file would be generated or modified in root output
# dir (next to test).
template("fuzzer_test") {
  # noop on unsupported platforms.
  # mark attributes as used.
  assert(invoker.sources == [] || invoker.sources != [])
  if (defined(invoker.additional_configs)) {
    assert(
        invoker.additional_configs == [] || invoker.additional_configs != [])
  }
  if (defined(invoker.deps)) {
    assert(invoker.deps == [] || invoker.deps != [])
  }
  if (defined(invoker.dict)) {
    assert(invoker.dict == [] || invoker.dict != [])
  }
  if (defined(invoker.libfuzzer_options)) {
    assert(invoker.libfuzzer_options == [] || invoker.libfuzzer_options != [])
  }
  if (defined(invoker.seed_corpus)) {
    assert(invoker.seed_corpus == [] || invoker.seed_corpus != [])
  }
  assert(!defined(invoker.check_includes) || invoker.check_includes != [])
  assert(!defined(invoker.include_dirs) || invoker.include_dirs != [])
  assert(!defined(invoker.defines) || invoker.defines != [])

  group(target_name) {
  }
}
